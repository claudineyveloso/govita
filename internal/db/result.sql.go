// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: result.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createResult = `-- name: CreateResult :exec
INSERT INTO results ( ID, image_url, description, font, price, promotion, search_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type CreateResultParams struct {
	ID          uuid.UUID `json:"id"`
	ImageUrl    string    `json:"image_url"`
	Description string    `json:"description"`
	Font        string    `json:"font"`
	Price       float64   `json:"price"`
	Promotion   bool      `json:"promotion"`
	SearchID    uuid.UUID `json:"search_id"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) CreateResult(ctx context.Context, arg CreateResultParams) error {
	_, err := q.db.ExecContext(ctx, createResult,
		arg.ID,
		arg.ImageUrl,
		arg.Description,
		arg.Font,
		arg.Price,
		arg.Promotion,
		arg.SearchID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getResult = `-- name: GetResult :one
SELECT id, image_url, description, font, price, promotion, search_id, created_at, updated_at
FROM results
WHERE results.id = $1
`

func (q *Queries) GetResult(ctx context.Context, id uuid.UUID) (Result, error) {
	row := q.db.QueryRowContext(ctx, getResult, id)
	var i Result
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Description,
		&i.Font,
		&i.Price,
		&i.Promotion,
		&i.SearchID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getResults = `-- name: GetResults :many
SELECT id, image_url, description, font, price, promotion, search_id, created_at, updated_at
FROM results
`

func (q *Queries) GetResults(ctx context.Context) ([]Result, error) {
	rows, err := q.db.QueryContext(ctx, getResults)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Result
	for rows.Next() {
		var i Result
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Description,
			&i.Font,
			&i.Price,
			&i.Promotion,
			&i.SearchID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
